This is a doctest based regression suite for 2-matrix_divided.txt

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


>>> print(matrix_divided([[1, 2, 3], [4, 5, 6]], 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> print(matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4))
[[0.25, 0.5, 0.75], [1.0, 1.25, 1.5], [1.75, 2.0, 2.25]]

>>> print(matrix_divided([[1, 2, 3], [4, 5, 6]], 'Holbie'))
Traceback (most recent call last):
...
TypeError: div must be a number

>>> print(matrix_divided([[1, 2, 3], [4, 5, 6]], 9.99))
[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]

>>> print(matrix_divided([[1, 2, 3], [4, 5, 6]], 0))
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

>>> print(matrix_divided([[1, 2, 3], [4, 5, 6]], float('inf')))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

>>> print(matrix_divided([[1, 2, 3], [4, 5, 6]], float('nan')))
[[nan, nan, nan], [nan, nan, nan]]

>>> print(matrix_divided([[1]], 1))
[[1.0]]

>>> print(matrix_divided(1))
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> print(matrix_divided(None, 3))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided([], 4))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided("School", 3))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided([["Holbie", 1, 2], [3, "School", 4]], 2))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided([[1, 1, 2], [3, 3, 4, 4], [5, 6]], 2))
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

